import streamlit as st
import numpy as np
import torch
from transformers import AutoTokenizer, AutoModel
from quant_model import QuantModel


# -------------------------------
# –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è FP32 –º–æ–¥–µ–ª—å
# -------------------------------
ORIG_ID = "deepvk/USER-bge-m3"
orig_tokenizer = AutoTokenizer.from_pretrained(ORIG_ID)
orig_model = AutoModel.from_pretrained(ORIG_ID)


def encode_orig(texts):
    """–ü–æ–ª—É—á–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ —á–µ—Ä–µ–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é PyTorch –º–æ–¥–µ–ª—å"""
    inputs = orig_tokenizer(texts, return_tensors="pt", padding=True, truncation=True)
    with torch.no_grad():
        outputs = orig_model(**inputs)
    token_embeddings = outputs[0]
    mask = inputs["attention_mask"].unsqueeze(-1).expand(token_embeddings.size()).float()
    summed = (token_embeddings * mask).sum(1)
    counts = torch.clamp(mask.sum(1), min=1e-9)
    embeddings = summed / counts
    embeddings = torch.nn.functional.normalize(embeddings, p=2, dim=1)
    return embeddings.cpu().numpy()


# -------------------------------
# –ö–≤–∞–Ω—Ç–æ–≤–∞–Ω–Ω–∞—è ONNX –º–æ–¥–µ–ª—å
# -------------------------------
quant_model = QuantModel("skatzR/USER-BGE-M3-ONNX-INT8")


# -------------------------------
# Streamlit UI
# -------------------------------
st.title("üî¨ Compare FP32 vs Quantized (ONNX INT8)")
st.write("–ü—Ä–æ–≤–µ—Ä–∫–∞ cosine similarity –º–µ–∂–¥—É –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª—å—é –∏ –∫–≤–∞–Ω—Ç–æ–≤–∞–Ω–Ω–æ–π.")

text1 = st.text_input("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç 1", "–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?")
text2 = st.text_input("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç 2", "Hello, how are you?")

if st.button("–°—Ä–∞–≤–Ω–∏—Ç—å"):
    with st.spinner("‚ö° –°—á–∏—Ç–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏..."):
        emb_orig = encode_orig([text1, text2])
        emb_quant = quant_model.encode([text1, text2])

        sim_orig = float(np.dot(emb_orig[0], emb_orig[1]))
        sim_quant = float(np.dot(emb_quant[0], emb_quant[1]))

    st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã")
    st.write(f"**–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è FP32 –º–æ–¥–µ–ª—å:** cosine similarity = `{sim_orig:.4f}`")
    st.write(f"**–ö–≤–∞–Ω—Ç–æ–≤–∞–Ω–Ω–∞—è INT8 –º–æ–¥–µ–ª—å:** cosine similarity = `{sim_quant:.4f}`")
